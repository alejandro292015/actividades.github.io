{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useState","nombre","setnombre","apellidos","setapellidos","correo","setcorreo","tel","settel","editor","seteditor","id","setid","validaciones","trim","console","log","listas","setlista","className","scope","length","map","item","key","nombres","apellido","email","onClick","arrayfiltrado","filter","eliminarReg","editarReg","onSubmit","e","preventDefault","editado","shortid","generate","type","placeholder","onChange","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.51cafba6.chunk.js","sourcesContent":["import React from 'react';\r\nimport shortid from 'shortid'\r\n\r\nfunction App() {\r\n\r\n  const [nombre,setnombre] = React.useState('')\r\n  const [apellidos,setapellidos] = React.useState('')\r\n  const [correo,setcorreo] = React.useState('')\r\n  const [tel,settel] = React.useState('')\r\n  const [editor,seteditor] = React.useState(false)\r\n  const [id,setid] = React.useState('')\r\n  const [error,seterror] = React.useState(null)\r\n\r\n\r\n\r\n  const validaciones = () => {\r\n    if(! nombre.trim() ){\r\n      console.log(nombre);\r\n      return\r\n    }\r\n    if(! apellidos.trim() ){\r\n      console.log(apellidos);\r\n\r\n      return\r\n    }\r\n    if(! correo.trim() ){\r\n      console.log(correo);\r\n\r\n      return\r\n    }\r\n    if(! tel.trim() ){\r\n      console.log(tel);\r\n\r\n      return\r\n    }\r\n  }\r\n\r\n  const eliminarReg = id => {\r\n    \r\n    const arrayfiltrado  = listas.filter(item => item.id !== id )\r\n    setlista(arrayfiltrado)\r\n    \r\n  }\r\n    \r\n\r\n  const editarReg = item => {\r\n      console.log(item);\r\n      seteditor(true)\r\n      setnombre(item.nombres)\r\n      setapellidos(item.apellido)\r\n      setcorreo(item.email)\r\n      settel(item.tel)\r\n      setid(item.id)\r\n      \r\n  }\r\n\r\n  const editarDator = (e) => {\r\n    e.preventDefault()\r\n    \r\n    validaciones()\r\n  \r\n    const editado = listas.map( item => item.id === id ? {id:id, nombres:nombre,apellido:apellidos,email:correo,tel:tel} : item  )\r\n\r\n    setlista(editado)\r\n    seteditor(false)\r\n    setnombre('')\r\n    setapellidos('')\r\n    setcorreo('')\r\n    settel('')\r\n    setid('')\r\n  }\r\n\r\n  const [listas,setlista] = React.useState([])\r\n\r\n\r\n  const agregarNombre = (e) => {\r\n    e.preventDefault()\r\n    \r\n   validaciones()\r\n    \r\n\r\n    setlista([\r\n      ...listas,\r\n      {id: shortid.generate() , nombres  : nombre , apellido: apellidos, email: correo , tel:tel}\r\n    ])\r\n    setnombre('')\r\n    setapellidos('')\r\n    setcorreo('')\r\n    settel('')\r\n\r\n  }\r\n     return (\r\n    <div className=\"container mt-5\">\r\n     <h1 className=\"text-center\">Crud</h1>\r\n\r\n     <hr />\r\n       <div className=\"row\">\r\n           <div className=\"col-8\">\r\n             <h4 className=\"text-center\"> Lista de registros</h4>\r\n             <table className=\"table\">\r\n  <thead>\r\n    <tr>\r\n      <th scope=\"col\">Nombre</th>\r\n      <th scope=\"col\">Apellidos</th>\r\n      <th scope=\"col\">correo</th>\r\n      <th scope=\"col\">Telefono</th>\r\n      <th scope=\"col\">Operacion</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n  {\r\n    listas.length === 0 ? (\r\n      <td>No hay nigun registro</td>\r\n    ) : (\r\n    listas.map(item => (\r\n    <tr key={item.id}>\r\n      <td>{item.nombres}</td>\r\n      <td>{item.apellido}</td>\r\n      <td>{item.email}</td>\r\n      <td>{item.tel}</td>\r\n      <td>\r\n        <button className=\"btn btn-danger btn-sm ml-2\" onClick={()=> eliminarReg(item.id) }\r\n        >\r\n        Eliminar\r\n        </button>\r\n        <button className=\"btn btn-success btn-sm ml-2\" onClick={() => editarReg(item)}\r\n        >\r\n        Editar\r\n        </button>\r\n      </td>\r\n    </tr>\r\n\r\n    ))\r\n    )\r\n  }\r\n    \r\n  </tbody>\r\n</table>\r\n         </div>\r\n           <div className=\"col-4\">\r\n           <h4 className=\"text-center\">{\r\n             editor ? 'Editar registro' : 'Agregar registro'\r\n             }</h4>\r\n             <form onSubmit={ editor ?  editarDator : agregarNombre}>\r\n               <input \r\n                 type=\"text\"\r\n                 className=\"form-control mb-2\"\r\n                 placeholder=\"ingrese sus nombres\"\r\n                 onChange={e => setnombre(e.target.value)}\r\n                 value={nombre}\r\n               />\r\n                <input \r\n                 type=\"text\"\r\n                 className=\"form-control mb-2\"\r\n                 placeholder=\"ingrese sus apellidos\"\r\n                 onChange={e => setapellidos(e.target.value)}\r\n                 value={apellidos}\r\n               />\r\n                <input \r\n                 type=\"text\"\r\n                 className=\"form-control mb-2\"\r\n                 placeholder=\"ingrese su correo\"\r\n                 onChange={e => setcorreo(e.target.value)}\r\n                 value={correo}\r\n               />\r\n               <input \r\n                 type=\"text\"\r\n                 className=\"form-control mb-2\"\r\n                 placeholder=\"ingrese su numero telefonico  \"\r\n                 onChange={e => settel(e.target.value)}\r\n                 value={tel}\r\n               />\r\n\r\n                {\r\n                  editor ? (\r\n\r\n               <button className=\"btn btn-primary btn-block\" type=\"submit\">Editar</button>\r\n                  ) : (\r\n                    \r\n                <button className=\"btn btn-dark btn-block\" type=\"submit\">Agregar</button>\r\n                  ) \r\n                }\r\n              \r\n             </form>\r\n           </div>\r\n           \r\n         \r\n       </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}